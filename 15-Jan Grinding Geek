GeeksforGeeks has introduced a special offer where you can enroll in any course, and if you manage to complete 90% of the course within 90 days, you will receive a refund of 90%.

Geek was fascinated by this offer. This offer was valid for only n days, and each day a new course was available for purchase. Geek decided that if he bought a course on some day, he will complete that course on the same day itself and redeem floor[90% of cost of the course] amount back. Find the maximum number of courses that Geek can complete in those n days if he had total amount initially.

Note: On any day, Geek can only buy the new course that was made available for purchase that day.

Example 1:

Input:
n = 2
total = 10
cost = [10, 9]
Output: 2
Explanation: 
Geek can buy the first course for 10 amount, 
complete it on the same date and redeem 9 back. 
Next, he can buy and complete the 2nd course too.
Example 2:

Input:
n = 11
total = 10
cost = [10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Output: 10
Explanation: 
Geek can buy and complete all the courses that cost 1
 as well as 1 course that cost 10 and 9 course that cost 1.
 solution :

 class Solution{
    int solve(int i,int total , vector<int>&cost ,int &n,vector<vector<int>>&dp){
        if(i>=n)
           return 0;
        int p=0,np=0;
        if(dp[total][i]!=-1){
            return dp[total][i];
        }
        np=solve(i+1,total,cost,n,dp);
        if(total>=cost[i]){
            int c=total-cost[i];
            int t=floor(0.9*(float)cost[i]);
            c+=t;
            p=1+solve(i+1,c,cost,n,dp);
        }
        return dp[total][i]=max(p,np);
    }
    public:
    
    int max_courses(int n, int total, vector<int> &cost)
    {
        //Code Here
        vector<vector<int>>dp(total+1,vector<int>(n+1,-1));
        return solve(0,total,cost,n,dp);
    }
};
