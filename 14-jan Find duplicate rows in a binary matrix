Given a boolean matrix of size RxC where each cell contains either 0 or 1, find the row numbers (0-based) of row which already exists or are repeated.

Example 1:

Input:
R = 2, C = 2
matrix[][] = {{1, 0},
            {1, 0}}
Output: 
1
Explanation:
Row 1 is duplicate of Row 0.
Example 2:

Input:
R = 4, C = 3
matrix[][] = {{ 1, 0, 0},
            { 1, 0, 0},
            { 0, 0, 0},
            { 0, 0, 0}}
Output: 
1 3 
Explanation:
Row 1 and Row 3 are duplicates of Row 0 and 2 respectively. 

class Solution
{   
    public:
    vector<int> repeatedRows(vector<vector<int>> &matrix, int M, int N) 
    { 
        // Your code here
         unordered_map<string,int> m1;
        vector<int> ans;
        for(int i = 0;i<M;i++){
            string s="";
            for(int j=0;j<N;j++){
                s+=to_string(matrix[i][j]);
            }
            if(m1[s]!=0) ans.push_back(i);
            m1[s]++;
        }
        return ans;
      
    } 
};
